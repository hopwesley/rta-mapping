// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.1
// 	protoc        v5.27.0
// source: rta_api.proto

package common

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PlatformType int32

const (
	PlatformType_PLATFORM_UNKNOWN PlatformType = 0
	PlatformType_ANDROID          PlatformType = 1
	PlatformType_IOS              PlatformType = 2
)

// Enum value maps for PlatformType.
var (
	PlatformType_name = map[int32]string{
		0: "PLATFORM_UNKNOWN",
		1: "ANDROID",
		2: "IOS",
	}
	PlatformType_value = map[string]int32{
		"PLATFORM_UNKNOWN": 0,
		"ANDROID":          1,
		"IOS":              2,
	}
)

func (x PlatformType) Enum() *PlatformType {
	p := new(PlatformType)
	*p = x
	return p
}

func (x PlatformType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PlatformType) Descriptor() protoreflect.EnumDescriptor {
	return file_rta_api_proto_enumTypes[0].Descriptor()
}

func (PlatformType) Type() protoreflect.EnumType {
	return &file_rta_api_proto_enumTypes[0]
}

func (x PlatformType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PlatformType.Descriptor instead.
func (PlatformType) EnumDescriptor() ([]byte, []int) {
	return file_rta_api_proto_rawDescGZIP(), []int{0}
}

type DeviceType int32

const (
	DeviceType_DEVICE_UNKNOWN DeviceType = 0
	DeviceType_PHONE          DeviceType = 1
	DeviceType_TABLET         DeviceType = 2
)

// Enum value maps for DeviceType.
var (
	DeviceType_name = map[int32]string{
		0: "DEVICE_UNKNOWN",
		1: "PHONE",
		2: "TABLET",
	}
	DeviceType_value = map[string]int32{
		"DEVICE_UNKNOWN": 0,
		"PHONE":          1,
		"TABLET":         2,
	}
)

func (x DeviceType) Enum() *DeviceType {
	p := new(DeviceType)
	*p = x
	return p
}

func (x DeviceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DeviceType) Descriptor() protoreflect.EnumDescriptor {
	return file_rta_api_proto_enumTypes[1].Descriptor()
}

func (DeviceType) Type() protoreflect.EnumType {
	return &file_rta_api_proto_enumTypes[1]
}

func (x DeviceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DeviceType.Descriptor instead.
func (DeviceType) EnumDescriptor() ([]byte, []int) {
	return file_rta_api_proto_rawDescGZIP(), []int{1}
}

type DeviceOsType int32

const (
	DeviceOsType_DEVICE_OS_UNKNOWN DeviceOsType = 0
	DeviceOsType_DEVICE_ANDROID    DeviceOsType = 1
	DeviceOsType_DEVICE_IOS        DeviceOsType = 2
	DeviceOsType_DEVICE_WINDOWS    DeviceOsType = 3
)

// Enum value maps for DeviceOsType.
var (
	DeviceOsType_name = map[int32]string{
		0: "DEVICE_OS_UNKNOWN",
		1: "DEVICE_ANDROID",
		2: "DEVICE_IOS",
		3: "DEVICE_WINDOWS",
	}
	DeviceOsType_value = map[string]int32{
		"DEVICE_OS_UNKNOWN": 0,
		"DEVICE_ANDROID":    1,
		"DEVICE_IOS":        2,
		"DEVICE_WINDOWS":    3,
	}
)

func (x DeviceOsType) Enum() *DeviceOsType {
	p := new(DeviceOsType)
	*p = x
	return p
}

func (x DeviceOsType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DeviceOsType) Descriptor() protoreflect.EnumDescriptor {
	return file_rta_api_proto_enumTypes[2].Descriptor()
}

func (DeviceOsType) Type() protoreflect.EnumType {
	return &file_rta_api_proto_enumTypes[2]
}

func (x DeviceOsType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DeviceOsType.Descriptor instead.
func (DeviceOsType) EnumDescriptor() ([]byte, []int) {
	return file_rta_api_proto_rawDescGZIP(), []int{2}
}

type GenderType int32

const (
	GenderType_GENDER_UNKNOWN GenderType = 0
	GenderType_MALE           GenderType = 1
	GenderType_FEMALE         GenderType = 2
)

// Enum value maps for GenderType.
var (
	GenderType_name = map[int32]string{
		0: "GENDER_UNKNOWN",
		1: "MALE",
		2: "FEMALE",
	}
	GenderType_value = map[string]int32{
		"GENDER_UNKNOWN": 0,
		"MALE":           1,
		"FEMALE":         2,
	}
)

func (x GenderType) Enum() *GenderType {
	p := new(GenderType)
	*p = x
	return p
}

func (x GenderType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GenderType) Descriptor() protoreflect.EnumDescriptor {
	return file_rta_api_proto_enumTypes[3].Descriptor()
}

func (GenderType) Type() protoreflect.EnumType {
	return &file_rta_api_proto_enumTypes[3]
}

func (x GenderType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GenderType.Descriptor instead.
func (GenderType) EnumDescriptor() ([]byte, []int) {
	return file_rta_api_proto_rawDescGZIP(), []int{3}
}

type DidType int32

const (
	DidType_IMEI           DidType = 0
	DidType_IMEI_MD5       DidType = 1
	DidType_ANDROID_ID     DidType = 2
	DidType_ANDROID_ID_MD5 DidType = 3
	DidType_IDFA           DidType = 4
	DidType_IDFA_MD5       DidType = 5
	DidType_OAID           DidType = 6
	DidType_OAID_MD5       DidType = 7
	DidType_GAID           DidType = 8
	DidType_GAID_MD5       DidType = 9
)

// Enum value maps for DidType.
var (
	DidType_name = map[int32]string{
		0: "IMEI",
		1: "IMEI_MD5",
		2: "ANDROID_ID",
		3: "ANDROID_ID_MD5",
		4: "IDFA",
		5: "IDFA_MD5",
		6: "OAID",
		7: "OAID_MD5",
		8: "GAID",
		9: "GAID_MD5",
	}
	DidType_value = map[string]int32{
		"IMEI":           0,
		"IMEI_MD5":       1,
		"ANDROID_ID":     2,
		"ANDROID_ID_MD5": 3,
		"IDFA":           4,
		"IDFA_MD5":       5,
		"OAID":           6,
		"OAID_MD5":       7,
		"GAID":           8,
		"GAID_MD5":       9,
	}
)

func (x DidType) Enum() *DidType {
	p := new(DidType)
	*p = x
	return p
}

func (x DidType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DidType) Descriptor() protoreflect.EnumDescriptor {
	return file_rta_api_proto_enumTypes[4].Descriptor()
}

func (DidType) Type() protoreflect.EnumType {
	return &file_rta_api_proto_enumTypes[4]
}

func (x DidType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DidType.Descriptor instead.
func (DidType) EnumDescriptor() ([]byte, []int) {
	return file_rta_api_proto_rawDescGZIP(), []int{4}
}

type EnableStrategy int32

const (
	EnableStrategy_DISABLE        EnableStrategy = 0
	EnableStrategy_ENABLE_DEFAULT EnableStrategy = 1
	EnableStrategy_ENABLE_Type_2  EnableStrategy = 2
	EnableStrategy_ENABLE_Type_3  EnableStrategy = 3
	EnableStrategy_ENABLE_Type_4  EnableStrategy = 4
	EnableStrategy_ENABLE_Type_5  EnableStrategy = 5
	EnableStrategy_ENABLE_Type_6  EnableStrategy = 6
	EnableStrategy_ENABLE_Type_7  EnableStrategy = 7
	EnableStrategy_ENABLE_Type_8  EnableStrategy = 8
	EnableStrategy_ENABLE_Type_9  EnableStrategy = 9
	EnableStrategy_ENABLE_Type_10 EnableStrategy = 10
)

// Enum value maps for EnableStrategy.
var (
	EnableStrategy_name = map[int32]string{
		0:  "DISABLE",
		1:  "ENABLE_DEFAULT",
		2:  "ENABLE_Type_2",
		3:  "ENABLE_Type_3",
		4:  "ENABLE_Type_4",
		5:  "ENABLE_Type_5",
		6:  "ENABLE_Type_6",
		7:  "ENABLE_Type_7",
		8:  "ENABLE_Type_8",
		9:  "ENABLE_Type_9",
		10: "ENABLE_Type_10",
	}
	EnableStrategy_value = map[string]int32{
		"DISABLE":        0,
		"ENABLE_DEFAULT": 1,
		"ENABLE_Type_2":  2,
		"ENABLE_Type_3":  3,
		"ENABLE_Type_4":  4,
		"ENABLE_Type_5":  5,
		"ENABLE_Type_6":  6,
		"ENABLE_Type_7":  7,
		"ENABLE_Type_8":  8,
		"ENABLE_Type_9":  9,
		"ENABLE_Type_10": 10,
	}
)

func (x EnableStrategy) Enum() *EnableStrategy {
	p := new(EnableStrategy)
	*p = x
	return p
}

func (x EnableStrategy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EnableStrategy) Descriptor() protoreflect.EnumDescriptor {
	return file_rta_api_proto_enumTypes[5].Descriptor()
}

func (EnableStrategy) Type() protoreflect.EnumType {
	return &file_rta_api_proto_enumTypes[5]
}

func (x EnableStrategy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EnableStrategy.Descriptor instead.
func (EnableStrategy) EnumDescriptor() ([]byte, []int) {
	return file_rta_api_proto_rawDescGZIP(), []int{5}
}

type ImageMode int32

const (
	ImageMode_IMAGE_DEFAULT ImageMode = 0
	ImageMode_IMAGE_VIDEO   ImageMode = 1
	ImageMode_IMAGE_OTHER   ImageMode = 2
)

// Enum value maps for ImageMode.
var (
	ImageMode_name = map[int32]string{
		0: "IMAGE_DEFAULT",
		1: "IMAGE_VIDEO",
		2: "IMAGE_OTHER",
	}
	ImageMode_value = map[string]int32{
		"IMAGE_DEFAULT": 0,
		"IMAGE_VIDEO":   1,
		"IMAGE_OTHER":   2,
	}
)

func (x ImageMode) Enum() *ImageMode {
	p := new(ImageMode)
	*p = x
	return p
}

func (x ImageMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ImageMode) Descriptor() protoreflect.EnumDescriptor {
	return file_rta_api_proto_enumTypes[6].Descriptor()
}

func (ImageMode) Type() protoreflect.EnumType {
	return &file_rta_api_proto_enumTypes[6]
}

func (x ImageMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ImageMode.Descriptor instead.
func (ImageMode) EnumDescriptor() ([]byte, []int) {
	return file_rta_api_proto_rawDescGZIP(), []int{6}
}

type CusVid int32

const (
	CusVid_CUS_VID_UNKNOWN CusVid = 0
	CusVid_CUS_VID_1       CusVid = 1
	CusVid_CUS_VID_2       CusVid = 2
	CusVid_CUS_VID_3       CusVid = 3
	CusVid_CUS_VID_4       CusVid = 4
	CusVid_CUS_VID_5       CusVid = 5
	CusVid_CUS_VID_6       CusVid = 6
	CusVid_CUS_VID_7       CusVid = 7
	CusVid_CUS_VID_8       CusVid = 8
	CusVid_CUS_VID_9       CusVid = 9
	CusVid_CUS_VID_10      CusVid = 10
)

// Enum value maps for CusVid.
var (
	CusVid_name = map[int32]string{
		0:  "CUS_VID_UNKNOWN",
		1:  "CUS_VID_1",
		2:  "CUS_VID_2",
		3:  "CUS_VID_3",
		4:  "CUS_VID_4",
		5:  "CUS_VID_5",
		6:  "CUS_VID_6",
		7:  "CUS_VID_7",
		8:  "CUS_VID_8",
		9:  "CUS_VID_9",
		10: "CUS_VID_10",
	}
	CusVid_value = map[string]int32{
		"CUS_VID_UNKNOWN": 0,
		"CUS_VID_1":       1,
		"CUS_VID_2":       2,
		"CUS_VID_3":       3,
		"CUS_VID_4":       4,
		"CUS_VID_5":       5,
		"CUS_VID_6":       6,
		"CUS_VID_7":       7,
		"CUS_VID_8":       8,
		"CUS_VID_9":       9,
		"CUS_VID_10":      10,
	}
)

func (x CusVid) Enum() *CusVid {
	p := new(CusVid)
	*p = x
	return p
}

func (x CusVid) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CusVid) Descriptor() protoreflect.EnumDescriptor {
	return file_rta_api_proto_enumTypes[7].Descriptor()
}

func (CusVid) Type() protoreflect.EnumType {
	return &file_rta_api_proto_enumTypes[7]
}

func (x CusVid) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CusVid.Descriptor instead.
func (CusVid) EnumDescriptor() ([]byte, []int) {
	return file_rta_api_proto_rawDescGZIP(), []int{7}
}

type UserInfo_UserType int32

const (
	UserInfo_EMPTY      UserInfo_UserType = 0
	UserInfo_PRICE_COEF UserInfo_UserType = 1
	UserInfo_DEFAULT    UserInfo_UserType = 2
	UserInfo_PRICE_BID  UserInfo_UserType = 3 // 站内直接出价
	UserInfo_RTA_BID    UserInfo_UserType = 7 //穿山甲使用
	UserInfo_BOOST_COEF UserInfo_UserType = 8 //穿山甲使用
	UserInfo_DEEP_MIN   UserInfo_UserType = 9 //穿山甲双出价@22.5.16
)

// Enum value maps for UserInfo_UserType.
var (
	UserInfo_UserType_name = map[int32]string{
		0: "EMPTY",
		1: "PRICE_COEF",
		2: "DEFAULT",
		3: "PRICE_BID",
		7: "RTA_BID",
		8: "BOOST_COEF",
		9: "DEEP_MIN",
	}
	UserInfo_UserType_value = map[string]int32{
		"EMPTY":      0,
		"PRICE_COEF": 1,
		"DEFAULT":    2,
		"PRICE_BID":  3,
		"RTA_BID":    7,
		"BOOST_COEF": 8,
		"DEEP_MIN":   9,
	}
)

func (x UserInfo_UserType) Enum() *UserInfo_UserType {
	p := new(UserInfo_UserType)
	*p = x
	return p
}

func (x UserInfo_UserType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UserInfo_UserType) Descriptor() protoreflect.EnumDescriptor {
	return file_rta_api_proto_enumTypes[8].Descriptor()
}

func (UserInfo_UserType) Type() protoreflect.EnumType {
	return &file_rta_api_proto_enumTypes[8]
}

func (x UserInfo_UserType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UserInfo_UserType.Descriptor instead.
func (UserInfo_UserType) EnumDescriptor() ([]byte, []int) {
	return file_rta_api_proto_rawDescGZIP(), []int{8, 0}
}

type UserInfo_PidType int32

const (
	UserInfo_PidType_0 UserInfo_PidType = 0
	UserInfo_PidType_1 UserInfo_PidType = 1
	UserInfo_PidType_2 UserInfo_PidType = 2
	UserInfo_PidType_3 UserInfo_PidType = 3
	UserInfo_PidType_4 UserInfo_PidType = 4
)

// Enum value maps for UserInfo_PidType.
var (
	UserInfo_PidType_name = map[int32]string{
		0: "PidType_0",
		1: "PidType_1",
		2: "PidType_2",
		3: "PidType_3",
		4: "PidType_4",
	}
	UserInfo_PidType_value = map[string]int32{
		"PidType_0": 0,
		"PidType_1": 1,
		"PidType_2": 2,
		"PidType_3": 3,
		"PidType_4": 4,
	}
)

func (x UserInfo_PidType) Enum() *UserInfo_PidType {
	p := new(UserInfo_PidType)
	*p = x
	return p
}

func (x UserInfo_PidType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UserInfo_PidType) Descriptor() protoreflect.EnumDescriptor {
	return file_rta_api_proto_enumTypes[9].Descriptor()
}

func (UserInfo_PidType) Type() protoreflect.EnumType {
	return &file_rta_api_proto_enumTypes[9]
}

func (x UserInfo_PidType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UserInfo_PidType.Descriptor instead.
func (UserInfo_PidType) EnumDescriptor() ([]byte, []int) {
	return file_rta_api_proto_rawDescGZIP(), []int{8, 1}
}

// 个性化出价支持分pricing type
// 保障数据合规 这里和我们的pricing 非对应关系
// rerank阶段单独做一次映射
type UserInfo_PricingType int32

const (
	UserInfo_NOLIMIT UserInfo_PricingType = 0 // 不限定
	UserInfo_OCPM    UserInfo_PricingType = 1
	UserInfo_OCPC    UserInfo_PricingType = 2
	UserInfo_CPC     UserInfo_PricingType = 3
)

// Enum value maps for UserInfo_PricingType.
var (
	UserInfo_PricingType_name = map[int32]string{
		0: "NOLIMIT",
		1: "OCPM",
		2: "OCPC",
		3: "CPC",
	}
	UserInfo_PricingType_value = map[string]int32{
		"NOLIMIT": 0,
		"OCPM":    1,
		"OCPC":    2,
		"CPC":     3,
	}
)

func (x UserInfo_PricingType) Enum() *UserInfo_PricingType {
	p := new(UserInfo_PricingType)
	*p = x
	return p
}

func (x UserInfo_PricingType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UserInfo_PricingType) Descriptor() protoreflect.EnumDescriptor {
	return file_rta_api_proto_enumTypes[10].Descriptor()
}

func (UserInfo_PricingType) Type() protoreflect.EnumType {
	return &file_rta_api_proto_enumTypes[10]
}

func (x UserInfo_PricingType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UserInfo_PricingType.Descriptor instead.
func (UserInfo_PricingType) EnumDescriptor() ([]byte, []int) {
	return file_rta_api_proto_rawDescGZIP(), []int{8, 2}
}

type UserInfo_ActionType int32

const (
	UserInfo_ACTION_DEFAULT     UserInfo_ActionType = 0   // 待补充，尽量与站内转化行为一致
	UserInfo_IN_APP_ORDER       UserInfo_ActionType = 20  // app内下单
	UserInfo_CUSTOMER_EFFECTIVE UserInfo_ActionType = 26  //有效获客
	UserInfo_LOAN_CREDIT        UserInfo_ActionType = 105 // 授信
)

// Enum value maps for UserInfo_ActionType.
var (
	UserInfo_ActionType_name = map[int32]string{
		0:   "ACTION_DEFAULT",
		20:  "IN_APP_ORDER",
		26:  "CUSTOMER_EFFECTIVE",
		105: "LOAN_CREDIT",
	}
	UserInfo_ActionType_value = map[string]int32{
		"ACTION_DEFAULT":     0,
		"IN_APP_ORDER":       20,
		"CUSTOMER_EFFECTIVE": 26,
		"LOAN_CREDIT":        105,
	}
)

func (x UserInfo_ActionType) Enum() *UserInfo_ActionType {
	p := new(UserInfo_ActionType)
	*p = x
	return p
}

func (x UserInfo_ActionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UserInfo_ActionType) Descriptor() protoreflect.EnumDescriptor {
	return file_rta_api_proto_enumTypes[11].Descriptor()
}

func (UserInfo_ActionType) Type() protoreflect.EnumType {
	return &file_rta_api_proto_enumTypes[11]
}

func (x UserInfo_ActionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UserInfo_ActionType.Descriptor instead.
func (UserInfo_ActionType) EnumDescriptor() ([]byte, []int) {
	return file_rta_api_proto_rawDescGZIP(), []int{8, 3}
}

type Paid struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value   string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	Version string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"` // 1.3/1.4
}

func (x *Paid) Reset() {
	*x = Paid{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rta_api_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Paid) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Paid) ProtoMessage() {}

func (x *Paid) ProtoReflect() protoreflect.Message {
	mi := &file_rta_api_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Paid.ProtoReflect.Descriptor instead.
func (*Paid) Descriptor() ([]byte, []int) {
	return file_rta_api_proto_rawDescGZIP(), []int{0}
}

func (x *Paid) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *Paid) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

type Device struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ImeiMd5         string       `protobuf:"bytes,1,opt,name=imei_md5,json=imeiMd5,proto3" json:"imei_md5,omitempty"`
	AndroidIdMd5    string       `protobuf:"bytes,2,opt,name=android_id_md5,json=androidIdMd5,proto3" json:"android_id_md5,omitempty"`
	Oaid            string       `protobuf:"bytes,3,opt,name=oaid,proto3" json:"oaid,omitempty"`
	Idfa            string       `protobuf:"bytes,4,opt,name=idfa,proto3" json:"idfa,omitempty"`
	ImeiSecureId    string       `protobuf:"bytes,5,opt,name=imei_secure_id,json=imeiSecureId,proto3" json:"imei_secure_id,omitempty"`
	Caid1           string       `protobuf:"bytes,6,opt,name=caid1,proto3" json:"caid1,omitempty"`
	Caid2           string       `protobuf:"bytes,7,opt,name=caid2,proto3" json:"caid2,omitempty"`
	GlobalDid       string       `protobuf:"bytes,8,opt,name=global_did,json=globalDid,proto3" json:"global_did,omitempty"`
	Gaid            string       `protobuf:"bytes,9,opt,name=gaid,proto3" json:"gaid,omitempty"`
	ImeiMd5SecureId string       `protobuf:"bytes,10,opt,name=imei_md5_secure_id,json=imeiMd5SecureId,proto3" json:"imei_md5_secure_id,omitempty"` // 原值md5后加密
	IdfaSecureId    string       `protobuf:"bytes,11,opt,name=idfa_secure_id,json=idfaSecureId,proto3" json:"idfa_secure_id,omitempty"`            // 大写原值加密
	IdfaMd5SecureId string       `protobuf:"bytes,12,opt,name=idfa_md5_secure_id,json=idfaMd5SecureId,proto3" json:"idfa_md5_secure_id,omitempty"` // 大写原值md5后加密
	OaidSecureId    string       `protobuf:"bytes,13,opt,name=oaid_secure_id,json=oaidSecureId,proto3" json:"oaid_secure_id,omitempty"`            // 大写原值加密
	OaidMd5SecureId string       `protobuf:"bytes,14,opt,name=oaid_md5_secure_id,json=oaidMd5SecureId,proto3" json:"oaid_md5_secure_id,omitempty"` // 大写md5后加密
	SkVersion       string       `protobuf:"bytes,15,opt,name=sk_version,json=skVersion,proto3" json:"sk_version,omitempty"`                       // 加密秘钥版本
	Ip              string       `protobuf:"bytes,17,opt,name=ip,proto3" json:"ip,omitempty"`
	Ua              string       `protobuf:"bytes,18,opt,name=ua,proto3" json:"ua,omitempty"`
	UnionImei       string       `protobuf:"bytes,19,opt,name=union_imei,json=unionImei,proto3" json:"union_imei,omitempty"`
	Paid            string       `protobuf:"bytes,20,opt,name=paid,proto3" json:"paid,omitempty"` // 支持拼多多在无 IDFA 流量上参竞与归因
	Idfv            string       `protobuf:"bytes,21,opt,name=idfv,proto3" json:"idfv,omitempty"`
	MbTimeMd5       string       `protobuf:"bytes,22,opt,name=mb_time_md5,json=mbTimeMd5,proto3" json:"mb_time_md5,omitempty"`       // 拼多多系统更新时间
	BootTimeMd5     string       `protobuf:"bytes,23,opt,name=boot_time_md5,json=bootTimeMd5,proto3" json:"boot_time_md5,omitempty"` // 拼多多设备启动时间
	Caid1SecureId   string       `protobuf:"bytes,24,opt,name=caid1_secure_id,json=caid1SecureId,proto3" json:"caid1_secure_id,omitempty"`
	Caid2SecureId   string       `protobuf:"bytes,25,opt,name=caid2_secure_id,json=caid2SecureId,proto3" json:"caid2_secure_id,omitempty"`
	AppId           int64        `protobuf:"varint,26,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`                                          // app点位
	DeviceOsType    DeviceOsType `protobuf:"varint,27,opt,name=device_os_type,json=deviceOsType,proto3,enum=DeviceOsType" json:"device_os_type,omitempty"` // 操作系统类型
	OsVersion       string       `protobuf:"bytes,28,opt,name=os_version,json=osVersion,proto3" json:"os_version,omitempty"`                               // 操作系统版本
	InterfaceType   DeviceOsType `protobuf:"varint,29,opt,name=interface_type,json=interfaceType,proto3,enum=DeviceOsType" json:"interface_type,omitempty"`
	ContentGroup    string       `protobuf:"bytes,30,opt,name=content_group,json=contentGroup,proto3" json:"content_group,omitempty"`
	Caid1Version    string       `protobuf:"bytes,31,opt,name=caid1_version,json=caid1Version,proto3" json:"caid1_version,omitempty"`
	Caid2Version    string       `protobuf:"bytes,32,opt,name=caid2_version,json=caid2Version,proto3" json:"caid2_version,omitempty"`
	Paids           []*Paid      `protobuf:"bytes,33,rep,name=paids,proto3" json:"paids,omitempty"`
	Caid            string       `protobuf:"bytes,34,opt,name=caid,proto3" json:"caid,omitempty"` // CAID 2024版本
}

func (x *Device) Reset() {
	*x = Device{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rta_api_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Device) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Device) ProtoMessage() {}

func (x *Device) ProtoReflect() protoreflect.Message {
	mi := &file_rta_api_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Device.ProtoReflect.Descriptor instead.
func (*Device) Descriptor() ([]byte, []int) {
	return file_rta_api_proto_rawDescGZIP(), []int{1}
}

func (x *Device) GetImeiMd5() string {
	if x != nil {
		return x.ImeiMd5
	}
	return ""
}

func (x *Device) GetAndroidIdMd5() string {
	if x != nil {
		return x.AndroidIdMd5
	}
	return ""
}

func (x *Device) GetOaid() string {
	if x != nil {
		return x.Oaid
	}
	return ""
}

func (x *Device) GetIdfa() string {
	if x != nil {
		return x.Idfa
	}
	return ""
}

func (x *Device) GetImeiSecureId() string {
	if x != nil {
		return x.ImeiSecureId
	}
	return ""
}

func (x *Device) GetCaid1() string {
	if x != nil {
		return x.Caid1
	}
	return ""
}

func (x *Device) GetCaid2() string {
	if x != nil {
		return x.Caid2
	}
	return ""
}

func (x *Device) GetGlobalDid() string {
	if x != nil {
		return x.GlobalDid
	}
	return ""
}

func (x *Device) GetGaid() string {
	if x != nil {
		return x.Gaid
	}
	return ""
}

func (x *Device) GetImeiMd5SecureId() string {
	if x != nil {
		return x.ImeiMd5SecureId
	}
	return ""
}

func (x *Device) GetIdfaSecureId() string {
	if x != nil {
		return x.IdfaSecureId
	}
	return ""
}

func (x *Device) GetIdfaMd5SecureId() string {
	if x != nil {
		return x.IdfaMd5SecureId
	}
	return ""
}

func (x *Device) GetOaidSecureId() string {
	if x != nil {
		return x.OaidSecureId
	}
	return ""
}

func (x *Device) GetOaidMd5SecureId() string {
	if x != nil {
		return x.OaidMd5SecureId
	}
	return ""
}

func (x *Device) GetSkVersion() string {
	if x != nil {
		return x.SkVersion
	}
	return ""
}

func (x *Device) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *Device) GetUa() string {
	if x != nil {
		return x.Ua
	}
	return ""
}

func (x *Device) GetUnionImei() string {
	if x != nil {
		return x.UnionImei
	}
	return ""
}

func (x *Device) GetPaid() string {
	if x != nil {
		return x.Paid
	}
	return ""
}

func (x *Device) GetIdfv() string {
	if x != nil {
		return x.Idfv
	}
	return ""
}

func (x *Device) GetMbTimeMd5() string {
	if x != nil {
		return x.MbTimeMd5
	}
	return ""
}

func (x *Device) GetBootTimeMd5() string {
	if x != nil {
		return x.BootTimeMd5
	}
	return ""
}

func (x *Device) GetCaid1SecureId() string {
	if x != nil {
		return x.Caid1SecureId
	}
	return ""
}

func (x *Device) GetCaid2SecureId() string {
	if x != nil {
		return x.Caid2SecureId
	}
	return ""
}

func (x *Device) GetAppId() int64 {
	if x != nil {
		return x.AppId
	}
	return 0
}

func (x *Device) GetDeviceOsType() DeviceOsType {
	if x != nil {
		return x.DeviceOsType
	}
	return DeviceOsType_DEVICE_OS_UNKNOWN
}

func (x *Device) GetOsVersion() string {
	if x != nil {
		return x.OsVersion
	}
	return ""
}

func (x *Device) GetInterfaceType() DeviceOsType {
	if x != nil {
		return x.InterfaceType
	}
	return DeviceOsType_DEVICE_OS_UNKNOWN
}

func (x *Device) GetContentGroup() string {
	if x != nil {
		return x.ContentGroup
	}
	return ""
}

func (x *Device) GetCaid1Version() string {
	if x != nil {
		return x.Caid1Version
	}
	return ""
}

func (x *Device) GetCaid2Version() string {
	if x != nil {
		return x.Caid2Version
	}
	return ""
}

func (x *Device) GetPaids() []*Paid {
	if x != nil {
		return x.Paids
	}
	return nil
}

func (x *Device) GetCaid() string {
	if x != nil {
		return x.Caid
	}
	return ""
}

type Industry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FirstIndustry  int64 `protobuf:"varint,1,opt,name=first_industry,json=firstIndustry,proto3" json:"first_industry,omitempty"`
	SecondIndustry int64 `protobuf:"varint,2,opt,name=second_industry,json=secondIndustry,proto3" json:"second_industry,omitempty"`
}

func (x *Industry) Reset() {
	*x = Industry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rta_api_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Industry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Industry) ProtoMessage() {}

func (x *Industry) ProtoReflect() protoreflect.Message {
	mi := &file_rta_api_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Industry.ProtoReflect.Descriptor instead.
func (*Industry) Descriptor() ([]byte, []int) {
	return file_rta_api_proto_rawDescGZIP(), []int{2}
}

func (x *Industry) GetFirstIndustry() int64 {
	if x != nil {
		return x.FirstIndustry
	}
	return 0
}

func (x *Industry) GetSecondIndustry() int64 {
	if x != nil {
		return x.SecondIndustry
	}
	return 0
}

type Geo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	City     int64   `protobuf:"varint,1,opt,name=city,proto3" json:"city,omitempty"`
	Lat      float64 `protobuf:"fixed64,2,opt,name=lat,proto3" json:"lat,omitempty"`
	Lon      float64 `protobuf:"fixed64,3,opt,name=lon,proto3" json:"lon,omitempty"`
	Country  string  `protobuf:"bytes,4,opt,name=Country,proto3" json:"Country,omitempty"`
	District int64   `protobuf:"varint,5,opt,name=district,proto3" json:"district,omitempty"`
}

func (x *Geo) Reset() {
	*x = Geo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rta_api_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Geo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Geo) ProtoMessage() {}

func (x *Geo) ProtoReflect() protoreflect.Message {
	mi := &file_rta_api_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Geo.ProtoReflect.Descriptor instead.
func (*Geo) Descriptor() ([]byte, []int) {
	return file_rta_api_proto_rawDescGZIP(), []int{3}
}

func (x *Geo) GetCity() int64 {
	if x != nil {
		return x.City
	}
	return 0
}

func (x *Geo) GetLat() float64 {
	if x != nil {
		return x.Lat
	}
	return 0
}

func (x *Geo) GetLon() float64 {
	if x != nil {
		return x.Lon
	}
	return 0
}

func (x *Geo) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *Geo) GetDistrict() int64 {
	if x != nil {
		return x.District
	}
	return 0
}

type ModelMeta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    string  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Score float64 `protobuf:"fixed64,2,opt,name=score,proto3" json:"score,omitempty"`
}

func (x *ModelMeta) Reset() {
	*x = ModelMeta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rta_api_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModelMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModelMeta) ProtoMessage() {}

func (x *ModelMeta) ProtoReflect() protoreflect.Message {
	mi := &file_rta_api_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModelMeta.ProtoReflect.Descriptor instead.
func (*ModelMeta) Descriptor() ([]byte, []int) {
	return file_rta_api_proto_rawDescGZIP(), []int{4}
}

func (x *ModelMeta) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ModelMeta) GetScore() float64 {
	if x != nil {
		return x.Score
	}
	return 0
}

type PrivateModel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ModelMeta []*ModelMeta `protobuf:"bytes,1,rep,name=model_meta,json=modelMeta,proto3" json:"model_meta,omitempty"`
}

func (x *PrivateModel) Reset() {
	*x = PrivateModel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rta_api_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrivateModel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrivateModel) ProtoMessage() {}

func (x *PrivateModel) ProtoReflect() protoreflect.Message {
	mi := &file_rta_api_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrivateModel.ProtoReflect.Descriptor instead.
func (*PrivateModel) Descriptor() ([]byte, []int) {
	return file_rta_api_proto_rawDescGZIP(), []int{5}
}

func (x *PrivateModel) GetModelMeta() []*ModelMeta {
	if x != nil {
		return x.ModelMeta
	}
	return nil
}

type AdvPrivateModel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AdvPrivateModel map[int64]*PrivateModel `protobuf:"bytes,1,rep,name=adv_private_model,json=advPrivateModel,proto3" json:"adv_private_model,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *AdvPrivateModel) Reset() {
	*x = AdvPrivateModel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rta_api_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdvPrivateModel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdvPrivateModel) ProtoMessage() {}

func (x *AdvPrivateModel) ProtoReflect() protoreflect.Message {
	mi := &file_rta_api_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdvPrivateModel.ProtoReflect.Descriptor instead.
func (*AdvPrivateModel) Descriptor() ([]byte, []int) {
	return file_rta_api_proto_rawDescGZIP(), []int{6}
}

func (x *AdvPrivateModel) GetAdvPrivateModel() map[int64]*PrivateModel {
	if x != nil {
		return x.AdvPrivateModel
	}
	return nil
}

type Req struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Platform       PlatformType   `protobuf:"varint,1,opt,name=platform,proto3,enum=PlatformType" json:"platform,omitempty"`
	Did            string         `protobuf:"bytes,2,opt,name=did,proto3" json:"did,omitempty"`                      // 安卓为imei，ios为idfa，站内必传字段
	SlotId         int64          `protobuf:"varint,3,opt,name=slot_id,json=slotId,proto3" json:"slot_id,omitempty"` //广告位ID
	Age            int32          `protobuf:"varint,4,opt,name=age,proto3" json:"age,omitempty"`                     //  0(<18), 1(18~23), 2(24~30), 3(31~40) 4(41~49), 5(>50)
	Gender         GenderType     `protobuf:"varint,5,opt,name=gender,proto3,enum=GenderType" json:"gender,omitempty"`
	City           string         `protobuf:"bytes,6,opt,name=city,proto3" json:"city,omitempty"`
	Model          string         `protobuf:"bytes,7,opt,name=model,proto3" json:"model,omitempty"`
	InstallList    []string       `protobuf:"bytes,8,rep,name=install_list,json=installList,proto3" json:"install_list,omitempty"`   //安装包名列表,只包含关注包名
	DidType        DidType        `protobuf:"varint,9,opt,name=did_type,json=didType,proto3,enum=DidType" json:"did_type,omitempty"` //did_type:imei,imei_md5,idfa,Android id，站内必传字段
	Experiment     int32          `protobuf:"varint,10,opt,name=experiment,proto3" json:"experiment,omitempty"`                      //实验分组 1~n
	DeviceType     DeviceType     `protobuf:"varint,11,opt,name=device_type,json=deviceType,proto3,enum=DeviceType" json:"device_type,omitempty"`
	ReqId          string         `protobuf:"bytes,12,opt,name=req_id,json=reqId,proto3" json:"req_id,omitempty"`                                                 // 站内必传字段
	Source         string         `protobuf:"bytes,13,opt,name=source,proto3" json:"source,omitempty"`                                                            // 站内必传字段
	RtaIds         []int64        `protobuf:"varint,14,rep,packed,name=rta_ids,json=rtaIds,proto3" json:"rta_ids,omitempty"`                                      // 站内必传字段
	EnableStrategy EnableStrategy `protobuf:"varint,15,opt,name=enable_strategy,json=enableStrategy,proto3,enum=EnableStrategy" json:"enable_strategy,omitempty"` // 联合实验的参数，站内必传字段
	TtDid          int64          `protobuf:"varint,16,opt,name=tt_did,json=ttDid,proto3" json:"tt_did,omitempty"`                                                //联运使用
	Device         *Device        `protobuf:"bytes,17,opt,name=device,proto3" json:"device,omitempty"`                                                            //新版设备信息
	Industry       *Industry      `protobuf:"bytes,18,opt,name=industry,proto3" json:"industry,omitempty"`                                                        // 媒体的行业信息
	Geo            *Geo           `protobuf:"bytes,19,opt,name=geo,proto3" json:"geo,omitempty"`                                                                  // 地理位置信息
	DeviceModel    string         `protobuf:"bytes,20,opt,name=DeviceModel,proto3" json:"DeviceModel,omitempty"`                                                  // 设备型号
	CreativeType   []int32        `protobuf:"varint,21,rep,packed,name=creative_type,json=creativeType,proto3" json:"creative_type,omitempty"`                    // 可以出的素材类型
	AdSlotType     int32          `protobuf:"varint,22,opt,name=ad_slot_type,json=adSlotType,proto3" json:"ad_slot_type,omitempty"`                               // 广告位类型
	AppBundleId    string         `protobuf:"bytes,23,opt,name=app_bundle_id,json=appBundleId,proto3" json:"app_bundle_id,omitempty"`                             // 媒体包名
	Vids           []int32        `protobuf:"varint,24,rep,packed,name=vids,proto3" json:"vids,omitempty"`                                                        // 流量命中的vid列表，非必填
	PrivateModel   []*ModelMeta   `protobuf:"bytes,25,rep,name=private_model,json=privateModel,proto3" json:"private_model,omitempty"`                            // 联合建模分数(数组)
	ImageMode      ImageMode      `protobuf:"varint,26,opt,name=image_mode,json=imageMode,proto3,enum=ImageMode" json:"image_mode,omitempty"`                     // 请求素材类型（粗略划分）
	UserId         int64          `protobuf:"varint,27,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                                             // 用户id
	AdxId          int64          `protobuf:"varint,28,opt,name=adx_id,json=adxId,proto3" json:"adx_id,omitempty"`                                                // adx_id
	AppId          int64          `protobuf:"varint,29,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`                                                // app点位
}

func (x *Req) Reset() {
	*x = Req{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rta_api_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Req) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Req) ProtoMessage() {}

func (x *Req) ProtoReflect() protoreflect.Message {
	mi := &file_rta_api_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Req.ProtoReflect.Descriptor instead.
func (*Req) Descriptor() ([]byte, []int) {
	return file_rta_api_proto_rawDescGZIP(), []int{7}
}

func (x *Req) GetPlatform() PlatformType {
	if x != nil {
		return x.Platform
	}
	return PlatformType_PLATFORM_UNKNOWN
}

func (x *Req) GetDid() string {
	if x != nil {
		return x.Did
	}
	return ""
}

func (x *Req) GetSlotId() int64 {
	if x != nil {
		return x.SlotId
	}
	return 0
}

func (x *Req) GetAge() int32 {
	if x != nil {
		return x.Age
	}
	return 0
}

func (x *Req) GetGender() GenderType {
	if x != nil {
		return x.Gender
	}
	return GenderType_GENDER_UNKNOWN
}

func (x *Req) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *Req) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

func (x *Req) GetInstallList() []string {
	if x != nil {
		return x.InstallList
	}
	return nil
}

func (x *Req) GetDidType() DidType {
	if x != nil {
		return x.DidType
	}
	return DidType_IMEI
}

func (x *Req) GetExperiment() int32 {
	if x != nil {
		return x.Experiment
	}
	return 0
}

func (x *Req) GetDeviceType() DeviceType {
	if x != nil {
		return x.DeviceType
	}
	return DeviceType_DEVICE_UNKNOWN
}

func (x *Req) GetReqId() string {
	if x != nil {
		return x.ReqId
	}
	return ""
}

func (x *Req) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *Req) GetRtaIds() []int64 {
	if x != nil {
		return x.RtaIds
	}
	return nil
}

func (x *Req) GetEnableStrategy() EnableStrategy {
	if x != nil {
		return x.EnableStrategy
	}
	return EnableStrategy_DISABLE
}

func (x *Req) GetTtDid() int64 {
	if x != nil {
		return x.TtDid
	}
	return 0
}

func (x *Req) GetDevice() *Device {
	if x != nil {
		return x.Device
	}
	return nil
}

func (x *Req) GetIndustry() *Industry {
	if x != nil {
		return x.Industry
	}
	return nil
}

func (x *Req) GetGeo() *Geo {
	if x != nil {
		return x.Geo
	}
	return nil
}

func (x *Req) GetDeviceModel() string {
	if x != nil {
		return x.DeviceModel
	}
	return ""
}

func (x *Req) GetCreativeType() []int32 {
	if x != nil {
		return x.CreativeType
	}
	return nil
}

func (x *Req) GetAdSlotType() int32 {
	if x != nil {
		return x.AdSlotType
	}
	return 0
}

func (x *Req) GetAppBundleId() string {
	if x != nil {
		return x.AppBundleId
	}
	return ""
}

func (x *Req) GetVids() []int32 {
	if x != nil {
		return x.Vids
	}
	return nil
}

func (x *Req) GetPrivateModel() []*ModelMeta {
	if x != nil {
		return x.PrivateModel
	}
	return nil
}

func (x *Req) GetImageMode() ImageMode {
	if x != nil {
		return x.ImageMode
	}
	return ImageMode_IMAGE_DEFAULT
}

func (x *Req) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *Req) GetAdxId() int64 {
	if x != nil {
		return x.AdxId
	}
	return 0
}

func (x *Req) GetAppId() int64 {
	if x != nil {
		return x.AppId
	}
	return 0
}

type UserInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsInterested        bool                      `protobuf:"varint,1,opt,name=is_interested,json=isInterested,proto3" json:"is_interested,omitempty"`                               // 是否对这个用户感兴趣，标识是否投放用的字段，站内必传
	UserScores          []*UserInfo_UserQuality   `protobuf:"bytes,2,rep,name=user_scores,json=userScores,proto3" json:"user_scores,omitempty"`                                      // 对用户的一些评判
	RtaId               int64                     `protobuf:"varint,3,opt,name=rta_id,json=rtaId,proto3" json:"rta_id,omitempty"`                                                    //rit_id，站内必传
	PidLists            []*UserInfo_PidList       `protobuf:"bytes,4,rep,name=pid_lists,json=pidLists,proto3" json:"pid_lists,omitempty"`                                            // RTA+DPA 相关的数据
	ActionScores        []*UserInfo_ActionQuality `protobuf:"bytes,5,rep,name=action_scores,json=actionScores,proto3" json:"action_scores,omitempty"`                                // 对用户转化行为的一些评判
	TargetAdvertiserIds []int64                   `protobuf:"varint,6,rep,packed,name=target_advertiser_ids,json=targetAdvertiserIds,proto3" json:"target_advertiser_ids,omitempty"` // 用于广告定向投放的advId列表
	AdIds               []int64                   `protobuf:"varint,7,rep,packed,name=ad_ids,json=adIds,proto3" json:"ad_ids,omitempty"`                                             // 用于广告定向投放的ad_id列表，只有is_interested为true的情况下才会生效
	AdvertisingScene    int32                     `protobuf:"varint,8,opt,name=advertising_scene,json=advertisingScene,proto3" json:"advertising_scene,omitempty"`                   // ug广告投放场景，仅穿山甲使用
	CusVid              CusVid                    `protobuf:"varint,9,opt,name=cus_vid,json=cusVid,proto3,enum=CusVid" json:"cus_vid,omitempty"`                                     // 广告主实验标签，rta_id粒度
}

func (x *UserInfo) Reset() {
	*x = UserInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rta_api_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserInfo) ProtoMessage() {}

func (x *UserInfo) ProtoReflect() protoreflect.Message {
	mi := &file_rta_api_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserInfo.ProtoReflect.Descriptor instead.
func (*UserInfo) Descriptor() ([]byte, []int) {
	return file_rta_api_proto_rawDescGZIP(), []int{8}
}

func (x *UserInfo) GetIsInterested() bool {
	if x != nil {
		return x.IsInterested
	}
	return false
}

func (x *UserInfo) GetUserScores() []*UserInfo_UserQuality {
	if x != nil {
		return x.UserScores
	}
	return nil
}

func (x *UserInfo) GetRtaId() int64 {
	if x != nil {
		return x.RtaId
	}
	return 0
}

func (x *UserInfo) GetPidLists() []*UserInfo_PidList {
	if x != nil {
		return x.PidLists
	}
	return nil
}

func (x *UserInfo) GetActionScores() []*UserInfo_ActionQuality {
	if x != nil {
		return x.ActionScores
	}
	return nil
}

func (x *UserInfo) GetTargetAdvertiserIds() []int64 {
	if x != nil {
		return x.TargetAdvertiserIds
	}
	return nil
}

func (x *UserInfo) GetAdIds() []int64 {
	if x != nil {
		return x.AdIds
	}
	return nil
}

func (x *UserInfo) GetAdvertisingScene() int32 {
	if x != nil {
		return x.AdvertisingScene
	}
	return 0
}

func (x *UserInfo) GetCusVid() CusVid {
	if x != nil {
		return x.CusVid
	}
	return CusVid_CUS_VID_UNKNOWN
}

type Rsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StatusCode          int32   `protobuf:"varint,1,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`                                     // 0代表成功，其他表示错误 ，站内必传字段
	ExcludeAdvertiserId []int64 `protobuf:"varint,2,rep,packed,name=exclude_advertiser_id,json=excludeAdvertiserId,proto3" json:"exclude_advertiser_id,omitempty"` // 禁止投放的账户ID
	ExcludeAdId         []int64 `protobuf:"varint,3,rep,packed,name=exclude_ad_id,json=excludeAdId,proto3" json:"exclude_ad_id,omitempty"`                         // 禁止投放的广告ID
	RtaBid              int64   `protobuf:"varint,4,opt,name=rta_bid,json=rtaBid,proto3" json:"rta_bid,omitempty"`
	// Deprecated: Marked as deprecated in rta_api.proto.
	CacheDuration int32                  `protobuf:"varint,5,opt,name=cache_duration,json=cacheDuration,proto3" json:"cache_duration,omitempty"` //缓存时长：小时之后使用cache_time_secs字段该字段废弃
	ReqId         string                 `protobuf:"bytes,6,opt,name=req_id,json=reqId,proto3" json:"req_id,omitempty"`
	UserInfos     []*UserInfo            `protobuf:"bytes,7,rep,name=user_infos,json=userInfos,proto3" json:"user_infos,omitempty"`                 // 站内必传字段
	Ts            int64                  `protobuf:"varint,8,opt,name=ts,proto3" json:"ts,omitempty"`                                               // 时间戳ms
	BidType       *wrapperspb.Int32Value `protobuf:"bytes,9,opt,name=bid_type,json=bidType,proto3" json:"bid_type,omitempty"`                       // 0表示参竞，1表示设备不参竞，2表示slot_id不参竞，结合缓存时长使用
	CacheTimeSecs int32                  `protobuf:"varint,10,opt,name=cache_time_secs,json=cacheTimeSecs,proto3" json:"cache_time_secs,omitempty"` //缓存时间: 秒
	FlEmbedding   []float32              `protobuf:"fixed32,11,rep,packed,name=fl_embedding,json=flEmbedding,proto3" json:"fl_embedding,omitempty"` // fl 客户在 rta 一次请求返回的 embedding
	RtaVid        string                 `protobuf:"bytes,12,opt,name=rta_vid,json=rtaVid,proto3" json:"rta_vid,omitempty"`                         // 反向联合实验 vid
	CusVid        CusVid                 `protobuf:"varint,13,opt,name=cus_vid,json=cusVid,proto3,enum=CusVid" json:"cus_vid,omitempty"`            // 请求粒度广告主实验标签
}

func (x *Rsp) Reset() {
	*x = Rsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rta_api_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Rsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Rsp) ProtoMessage() {}

func (x *Rsp) ProtoReflect() protoreflect.Message {
	mi := &file_rta_api_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Rsp.ProtoReflect.Descriptor instead.
func (*Rsp) Descriptor() ([]byte, []int) {
	return file_rta_api_proto_rawDescGZIP(), []int{9}
}

func (x *Rsp) GetStatusCode() int32 {
	if x != nil {
		return x.StatusCode
	}
	return 0
}

func (x *Rsp) GetExcludeAdvertiserId() []int64 {
	if x != nil {
		return x.ExcludeAdvertiserId
	}
	return nil
}

func (x *Rsp) GetExcludeAdId() []int64 {
	if x != nil {
		return x.ExcludeAdId
	}
	return nil
}

func (x *Rsp) GetRtaBid() int64 {
	if x != nil {
		return x.RtaBid
	}
	return 0
}

// Deprecated: Marked as deprecated in rta_api.proto.
func (x *Rsp) GetCacheDuration() int32 {
	if x != nil {
		return x.CacheDuration
	}
	return 0
}

func (x *Rsp) GetReqId() string {
	if x != nil {
		return x.ReqId
	}
	return ""
}

func (x *Rsp) GetUserInfos() []*UserInfo {
	if x != nil {
		return x.UserInfos
	}
	return nil
}

func (x *Rsp) GetTs() int64 {
	if x != nil {
		return x.Ts
	}
	return 0
}

func (x *Rsp) GetBidType() *wrapperspb.Int32Value {
	if x != nil {
		return x.BidType
	}
	return nil
}

func (x *Rsp) GetCacheTimeSecs() int32 {
	if x != nil {
		return x.CacheTimeSecs
	}
	return 0
}

func (x *Rsp) GetFlEmbedding() []float32 {
	if x != nil {
		return x.FlEmbedding
	}
	return nil
}

func (x *Rsp) GetRtaVid() string {
	if x != nil {
		return x.RtaVid
	}
	return ""
}

func (x *Rsp) GetCusVid() CusVid {
	if x != nil {
		return x.CusVid
	}
	return CusVid_CUS_VID_UNKNOWN
}

type UserInfo_UserQuality struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserType    UserInfo_UserType    `protobuf:"varint,1,opt,name=user_type,json=userType,proto3,enum=UserInfo_UserType" json:"user_type,omitempty"` // 对用户的分类，与rta广告的分类相对应
	Quality     float64              `protobuf:"fixed64,2,opt,name=quality,proto3" json:"quality,omitempty"`
	PricingType UserInfo_PricingType `protobuf:"varint,3,opt,name=pricing_type,json=pricingType,proto3,enum=UserInfo_PricingType" json:"pricing_type,omitempty"` // 分pricing type 支持出价扰动
}

func (x *UserInfo_UserQuality) Reset() {
	*x = UserInfo_UserQuality{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rta_api_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserInfo_UserQuality) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserInfo_UserQuality) ProtoMessage() {}

func (x *UserInfo_UserQuality) ProtoReflect() protoreflect.Message {
	mi := &file_rta_api_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserInfo_UserQuality.ProtoReflect.Descriptor instead.
func (*UserInfo_UserQuality) Descriptor() ([]byte, []int) {
	return file_rta_api_proto_rawDescGZIP(), []int{8, 0}
}

func (x *UserInfo_UserQuality) GetUserType() UserInfo_UserType {
	if x != nil {
		return x.UserType
	}
	return UserInfo_EMPTY
}

func (x *UserInfo_UserQuality) GetQuality() float64 {
	if x != nil {
		return x.Quality
	}
	return 0
}

func (x *UserInfo_UserQuality) GetPricingType() UserInfo_PricingType {
	if x != nil {
		return x.PricingType
	}
	return UserInfo_NOLIMIT
}

type UserInfo_ActionQuality struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActionType UserInfo_ActionType `protobuf:"varint,1,opt,name=action_type,json=actionType,proto3,enum=UserInfo_ActionType" json:"action_type,omitempty"` // 对用户转化行为的分类
	Quality    float64             `protobuf:"fixed64,2,opt,name=quality,proto3" json:"quality,omitempty"`                                                 // value range [0, 1]
}

func (x *UserInfo_ActionQuality) Reset() {
	*x = UserInfo_ActionQuality{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rta_api_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserInfo_ActionQuality) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserInfo_ActionQuality) ProtoMessage() {}

func (x *UserInfo_ActionQuality) ProtoReflect() protoreflect.Message {
	mi := &file_rta_api_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserInfo_ActionQuality.ProtoReflect.Descriptor instead.
func (*UserInfo_ActionQuality) Descriptor() ([]byte, []int) {
	return file_rta_api_proto_rawDescGZIP(), []int{8, 1}
}

func (x *UserInfo_ActionQuality) GetActionType() UserInfo_ActionType {
	if x != nil {
		return x.ActionType
	}
	return UserInfo_ACTION_DEFAULT
}

func (x *UserInfo_ActionQuality) GetQuality() float64 {
	if x != nil {
		return x.Quality
	}
	return 0
}

// rta+dpa维度个性化出价
type UserInfo_PidScore struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// pid
	Pid int64 `protobuf:"varint,1,opt,name=pid,proto3" json:"pid,omitempty"`
	// RTA_BID(7) 直接出价  BOOST_COEF(8) 溢价系数出价
	UserType UserInfo_UserType `protobuf:"varint,2,opt,name=user_type,json=userType,proto3,enum=UserInfo_UserType" json:"user_type,omitempty"`
	// 出价
	Quality float64 `protobuf:"fixed64,3,opt,name=quality,proto3" json:"quality,omitempty"`
}

func (x *UserInfo_PidScore) Reset() {
	*x = UserInfo_PidScore{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rta_api_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserInfo_PidScore) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserInfo_PidScore) ProtoMessage() {}

func (x *UserInfo_PidScore) ProtoReflect() protoreflect.Message {
	mi := &file_rta_api_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserInfo_PidScore.ProtoReflect.Descriptor instead.
func (*UserInfo_PidScore) Descriptor() ([]byte, []int) {
	return file_rta_api_proto_rawDescGZIP(), []int{8, 2}
}

func (x *UserInfo_PidScore) GetPid() int64 {
	if x != nil {
		return x.Pid
	}
	return 0
}

func (x *UserInfo_PidScore) GetUserType() UserInfo_UserType {
	if x != nil {
		return x.UserType
	}
	return UserInfo_EMPTY
}

func (x *UserInfo_PidScore) GetQuality() float64 {
	if x != nil {
		return x.Quality
	}
	return 0
}

type UserInfo_PidList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PidType    UserInfo_PidType `protobuf:"varint,1,opt,name=pid_type,json=pidType,proto3,enum=UserInfo_PidType" json:"pid_type,omitempty"` // 商品列表的重要程度，0代表最重要
	Pids       []int64          `protobuf:"varint,2,rep,packed,name=pids,proto3" json:"pids,omitempty"`                                     // 商品列表
	PlatformId int64            `protobuf:"varint,3,opt,name=platform_id,json=platformId,proto3" json:"platform_id,omitempty"`              // 商品库id
	// pid维度个性化出价
	PidScores []*UserInfo_PidScore `protobuf:"bytes,4,rep,name=pid_scores,json=pidScores,proto3" json:"pid_scores,omitempty"`
}

func (x *UserInfo_PidList) Reset() {
	*x = UserInfo_PidList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rta_api_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserInfo_PidList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserInfo_PidList) ProtoMessage() {}

func (x *UserInfo_PidList) ProtoReflect() protoreflect.Message {
	mi := &file_rta_api_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserInfo_PidList.ProtoReflect.Descriptor instead.
func (*UserInfo_PidList) Descriptor() ([]byte, []int) {
	return file_rta_api_proto_rawDescGZIP(), []int{8, 3}
}

func (x *UserInfo_PidList) GetPidType() UserInfo_PidType {
	if x != nil {
		return x.PidType
	}
	return UserInfo_PidType_0
}

func (x *UserInfo_PidList) GetPids() []int64 {
	if x != nil {
		return x.Pids
	}
	return nil
}

func (x *UserInfo_PidList) GetPlatformId() int64 {
	if x != nil {
		return x.PlatformId
	}
	return 0
}

func (x *UserInfo_PidList) GetPidScores() []*UserInfo_PidScore {
	if x != nil {
		return x.PidScores
	}
	return nil
}

var File_rta_api_proto protoreflect.FileDescriptor

var file_rta_api_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x72, 0x74, 0x61, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x36, 0x0a, 0x04, 0x50, 0x61, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xa4, 0x08, 0x0a, 0x06, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x6d, 0x65, 0x69, 0x5f, 0x6d, 0x64, 0x35, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x6d, 0x65, 0x69, 0x4d, 0x64, 0x35, 0x12, 0x24, 0x0a,
	0x0e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x5f, 0x69, 0x64, 0x5f, 0x6d, 0x64, 0x35, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x49, 0x64,
	0x4d, 0x64, 0x35, 0x12, 0x12, 0x0a, 0x04, 0x6f, 0x61, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6f, 0x61, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x64, 0x66, 0x61, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x64, 0x66, 0x61, 0x12, 0x24, 0x0a, 0x0e, 0x69,
	0x6d, 0x65, 0x69, 0x5f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6d, 0x65, 0x69, 0x53, 0x65, 0x63, 0x75, 0x72, 0x65, 0x49,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x61, 0x69, 0x64, 0x31, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x63, 0x61, 0x69, 0x64, 0x31, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x61, 0x69, 0x64, 0x32,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x61, 0x69, 0x64, 0x32, 0x12, 0x1d, 0x0a,
	0x0a, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x64, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x44, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x67, 0x61, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x67, 0x61, 0x69, 0x64,
	0x12, 0x2b, 0x0a, 0x12, 0x69, 0x6d, 0x65, 0x69, 0x5f, 0x6d, 0x64, 0x35, 0x5f, 0x73, 0x65, 0x63,
	0x75, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x69, 0x6d,
	0x65, 0x69, 0x4d, 0x64, 0x35, 0x53, 0x65, 0x63, 0x75, 0x72, 0x65, 0x49, 0x64, 0x12, 0x24, 0x0a,
	0x0e, 0x69, 0x64, 0x66, 0x61, 0x5f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x64, 0x66, 0x61, 0x53, 0x65, 0x63, 0x75, 0x72,
	0x65, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x12, 0x69, 0x64, 0x66, 0x61, 0x5f, 0x6d, 0x64, 0x35, 0x5f,
	0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x69, 0x64, 0x66, 0x61, 0x4d, 0x64, 0x35, 0x53, 0x65, 0x63, 0x75, 0x72, 0x65, 0x49, 0x64,
	0x12, 0x24, 0x0a, 0x0e, 0x6f, 0x61, 0x69, 0x64, 0x5f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6f, 0x61, 0x69, 0x64, 0x53, 0x65,
	0x63, 0x75, 0x72, 0x65, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x12, 0x6f, 0x61, 0x69, 0x64, 0x5f, 0x6d,
	0x64, 0x35, 0x5f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x6f, 0x61, 0x69, 0x64, 0x4d, 0x64, 0x35, 0x53, 0x65, 0x63, 0x75, 0x72,
	0x65, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x6b, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x6b, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x75, 0x61, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x75, 0x61, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6d, 0x65, 0x69,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x49, 0x6d, 0x65,
	0x69, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x69, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x70, 0x61, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x64, 0x66, 0x76, 0x18, 0x15, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x64, 0x66, 0x76, 0x12, 0x1e, 0x0a, 0x0b, 0x6d, 0x62, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6d, 0x64, 0x35, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x6d, 0x62, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x64, 0x35, 0x12, 0x22, 0x0a, 0x0d, 0x62, 0x6f, 0x6f,
	0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6d, 0x64, 0x35, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x62, 0x6f, 0x6f, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x64, 0x35, 0x12, 0x26, 0x0a,
	0x0f, 0x63, 0x61, 0x69, 0x64, 0x31, 0x5f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x61, 0x69, 0x64, 0x31, 0x53, 0x65, 0x63,
	0x75, 0x72, 0x65, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x61, 0x69, 0x64, 0x32, 0x5f, 0x73,
	0x65, 0x63, 0x75, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x63, 0x61, 0x69, 0x64, 0x32, 0x53, 0x65, 0x63, 0x75, 0x72, 0x65, 0x49, 0x64, 0x12, 0x15, 0x0a,
	0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x61,
	0x70, 0x70, 0x49, 0x64, 0x12, 0x33, 0x0a, 0x0e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6f,
	0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x4f, 0x73, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x4f, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x73, 0x5f,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6f,
	0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x0e, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0d, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4f, 0x73, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x0d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23,
	0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18,
	0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x61, 0x69, 0x64, 0x31, 0x5f, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x61, 0x69, 0x64,
	0x31, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x61, 0x69, 0x64,
	0x32, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x63, 0x61, 0x69, 0x64, 0x32, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a,
	0x05, 0x70, 0x61, 0x69, 0x64, 0x73, 0x18, 0x21, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x50,
	0x61, 0x69, 0x64, 0x52, 0x05, 0x70, 0x61, 0x69, 0x64, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x61,
	0x69, 0x64, 0x18, 0x22, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x61, 0x69, 0x64, 0x22, 0x5a,
	0x0a, 0x08, 0x49, 0x6e, 0x64, 0x75, 0x73, 0x74, 0x72, 0x79, 0x12, 0x25, 0x0a, 0x0e, 0x66, 0x69,
	0x72, 0x73, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x75, 0x73, 0x74, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0d, 0x66, 0x69, 0x72, 0x73, 0x74, 0x49, 0x6e, 0x64, 0x75, 0x73, 0x74, 0x72,
	0x79, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x5f, 0x69, 0x6e, 0x64, 0x75,
	0x73, 0x74, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x73, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x49, 0x6e, 0x64, 0x75, 0x73, 0x74, 0x72, 0x79, 0x22, 0x73, 0x0a, 0x03, 0x47, 0x65,
	0x6f, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x04, 0x63, 0x69, 0x74, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x03, 0x6c, 0x61, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x6c, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x22,
	0x31, 0x0a, 0x09, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x73, 0x63, 0x6f,
	0x72, 0x65, 0x22, 0x39, 0x0a, 0x0c, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x12, 0x29, 0x0a, 0x0a, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x6d, 0x65, 0x74, 0x61,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x4d, 0x65,
	0x74, 0x61, 0x52, 0x09, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x4d, 0x65, 0x74, 0x61, 0x22, 0xb7, 0x01,
	0x0a, 0x0f, 0x41, 0x64, 0x76, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x12, 0x51, 0x0a, 0x11, 0x61, 0x64, 0x76, 0x5f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65,
	0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x41,
	0x64, 0x76, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x41,
	0x64, 0x76, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x0f, 0x61, 0x64, 0x76, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4d,
	0x6f, 0x64, 0x65, 0x6c, 0x1a, 0x51, 0x0a, 0x14, 0x41, 0x64, 0x76, 0x50, 0x72, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x23,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x8f, 0x07, 0x0a, 0x03, 0x52, 0x65, 0x71, 0x12,
	0x29, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0d, 0x2e, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x64, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07,
	0x73, 0x6c, 0x6f, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73,
	0x6c, 0x6f, 0x74, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x03, 0x61, 0x67, 0x65, 0x12, 0x23, 0x0a, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0b, 0x2e, 0x47, 0x65, 0x6e, 0x64, 0x65, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04,
	0x63, 0x69, 0x74, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x69, 0x74, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c,
	0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6c, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x08, 0x64, 0x69, 0x64,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x08, 0x2e, 0x44, 0x69,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x64, 0x69, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x2c,
	0x0a, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0b, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x15, 0x0a, 0x06,
	0x72, 0x65, 0x71, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x65,
	0x71, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x72,
	0x74, 0x61, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x03, 0x52, 0x06, 0x72, 0x74,
	0x61, 0x49, 0x64, 0x73, 0x12, 0x38, 0x0a, 0x0f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x52, 0x0e,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x15,
	0x0a, 0x06, 0x74, 0x74, 0x5f, 0x64, 0x69, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x74, 0x74, 0x44, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x06,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x25, 0x0a, 0x08, 0x69, 0x6e, 0x64, 0x75, 0x73, 0x74,
	0x72, 0x79, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x49, 0x6e, 0x64, 0x75, 0x73,
	0x74, 0x72, 0x79, 0x52, 0x08, 0x69, 0x6e, 0x64, 0x75, 0x73, 0x74, 0x72, 0x79, 0x12, 0x16, 0x0a,
	0x03, 0x67, 0x65, 0x6f, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x04, 0x2e, 0x47, 0x65, 0x6f,
	0x52, 0x03, 0x67, 0x65, 0x6f, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d,
	0x6f, 0x64, 0x65, 0x6c, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x69, 0x76, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x15, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0c,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x76, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0c,
	0x61, 0x64, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x16, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x61, 0x64, 0x53, 0x6c, 0x6f, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22,
	0x0a, 0x0d, 0x61, 0x70, 0x70, 0x5f, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x70, 0x70, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65,
	0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x76, 0x69, 0x64, 0x73, 0x18, 0x18, 0x20, 0x03, 0x28, 0x05,
	0x52, 0x04, 0x76, 0x69, 0x64, 0x73, 0x12, 0x2f, 0x0a, 0x0d, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74,
	0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x19, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e,
	0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x0c, 0x70, 0x72, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x29, 0x0a, 0x0a, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0a, 0x2e, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x4d, 0x6f,
	0x64, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x1b, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x61,
	0x64, 0x78, 0x5f, 0x69, 0x64, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x61, 0x64, 0x78,
	0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x1d, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x22, 0xe2, 0x09, 0x0a, 0x08, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x65, 0x73, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69,
	0x73, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x65, 0x64, 0x12, 0x36, 0x0a, 0x0b, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x53, 0x63, 0x6f,
	0x72, 0x65, 0x73, 0x12, 0x15, 0x0a, 0x06, 0x72, 0x74, 0x61, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x72, 0x74, 0x61, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x09, 0x70, 0x69,
	0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x50, 0x69, 0x64, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x08, 0x70, 0x69, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x73, 0x12, 0x3c, 0x0a, 0x0d, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x0c, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x5f, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x03, 0x52, 0x13, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x41,
	0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x72, 0x49, 0x64, 0x73, 0x12, 0x15, 0x0a, 0x06,
	0x61, 0x64, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x03, 0x52, 0x05, 0x61, 0x64,
	0x49, 0x64, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x69,
	0x6e, 0x67, 0x5f, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10,
	0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x69, 0x6e, 0x67, 0x53, 0x63, 0x65, 0x6e, 0x65,
	0x12, 0x20, 0x0a, 0x07, 0x63, 0x75, 0x73, 0x5f, 0x76, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x07, 0x2e, 0x43, 0x75, 0x73, 0x56, 0x69, 0x64, 0x52, 0x06, 0x63, 0x75, 0x73, 0x56,
	0x69, 0x64, 0x1a, 0x92, 0x01, 0x0a, 0x0b, 0x55, 0x73, 0x65, 0x72, 0x51, 0x75, 0x61, 0x6c, 0x69,
	0x74, 0x79, 0x12, 0x2f, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x38, 0x0a,
	0x0c, 0x70, 0x72, 0x69, 0x63, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x50,
	0x72, 0x69, 0x63, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x70, 0x72, 0x69, 0x63,
	0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x1a, 0x60, 0x0a, 0x0d, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x35, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x07, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x1a, 0x67, 0x0a, 0x08, 0x50, 0x69, 0x64,
	0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x03, 0x70, 0x69, 0x64, 0x12, 0x2f, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08,
	0x75, 0x73, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x71, 0x75, 0x61, 0x6c,
	0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x71, 0x75, 0x61, 0x6c, 0x69,
	0x74, 0x79, 0x1a, 0x9f, 0x01, 0x0a, 0x07, 0x50, 0x69, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2c,
	0x0a, 0x08, 0x70, 0x69, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x11, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x50, 0x69, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x07, 0x70, 0x69, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x70, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x03, 0x52, 0x04, 0x70, 0x69, 0x64, 0x73,
	0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x49,
	0x64, 0x12, 0x31, 0x0a, 0x0a, 0x70, 0x69, 0x64, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x2e, 0x50, 0x69, 0x64, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x09, 0x70, 0x69, 0x64, 0x53, 0x63,
	0x6f, 0x72, 0x65, 0x73, 0x22, 0x6c, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x09, 0x0a, 0x05, 0x45, 0x4d, 0x50, 0x54, 0x59, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x50,
	0x52, 0x49, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x45, 0x46, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x44,
	0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x50, 0x52, 0x49, 0x43,
	0x45, 0x5f, 0x42, 0x49, 0x44, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x54, 0x41, 0x5f, 0x42,
	0x49, 0x44, 0x10, 0x07, 0x12, 0x0e, 0x0a, 0x0a, 0x42, 0x4f, 0x4f, 0x53, 0x54, 0x5f, 0x43, 0x4f,
	0x45, 0x46, 0x10, 0x08, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x45, 0x45, 0x50, 0x5f, 0x4d, 0x49, 0x4e,
	0x10, 0x09, 0x22, 0x54, 0x0a, 0x07, 0x50, 0x69, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0d, 0x0a,
	0x09, 0x50, 0x69, 0x64, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x30, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09,
	0x50, 0x69, 0x64, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x31, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x50,
	0x69, 0x64, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x32, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x50, 0x69,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x33, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x50, 0x69, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x5f, 0x34, 0x10, 0x04, 0x22, 0x37, 0x0a, 0x0b, 0x50, 0x72, 0x69, 0x63,
	0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x4e, 0x4f, 0x4c, 0x49, 0x4d,
	0x49, 0x54, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x4f, 0x43, 0x50, 0x4d, 0x10, 0x01, 0x12, 0x08,
	0x0a, 0x04, 0x4f, 0x43, 0x50, 0x43, 0x10, 0x02, 0x12, 0x07, 0x0a, 0x03, 0x43, 0x50, 0x43, 0x10,
	0x03, 0x22, 0x5b, 0x0a, 0x0a, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x12, 0x0a, 0x0e, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c,
	0x54, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x49, 0x4e, 0x5f, 0x41, 0x50, 0x50, 0x5f, 0x4f, 0x52,
	0x44, 0x45, 0x52, 0x10, 0x14, 0x12, 0x16, 0x0a, 0x12, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x45,
	0x52, 0x5f, 0x45, 0x46, 0x46, 0x45, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x1a, 0x12, 0x0f, 0x0a,
	0x0b, 0x4c, 0x4f, 0x41, 0x4e, 0x5f, 0x43, 0x52, 0x45, 0x44, 0x49, 0x54, 0x10, 0x69, 0x22, 0xd9,
	0x03, 0x0a, 0x03, 0x52, 0x73, 0x70, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x36, 0x0a, 0x15, 0x65, 0x78, 0x63, 0x6c, 0x75,
	0x64, 0x65, 0x5f, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x03, 0x42, 0x02, 0x10, 0x01, 0x52, 0x13, 0x65, 0x78, 0x63, 0x6c,
	0x75, 0x64, 0x65, 0x41, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x26, 0x0a, 0x0d, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x61, 0x64, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x03, 0x42, 0x02, 0x10, 0x01, 0x52, 0x0b, 0x65, 0x78, 0x63, 0x6c,
	0x75, 0x64, 0x65, 0x41, 0x64, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x74, 0x61, 0x5f, 0x62,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x72, 0x74, 0x61, 0x42, 0x69, 0x64,
	0x12, 0x29, 0x0a, 0x0e, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0d, 0x63, 0x61,
	0x63, 0x68, 0x65, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x15, 0x0a, 0x06, 0x72,
	0x65, 0x71, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x65, 0x71,
	0x49, 0x64, 0x12, 0x28, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x73,
	0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x0e, 0x0a, 0x02,
	0x74, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x74, 0x73, 0x12, 0x36, 0x0a, 0x08,
	0x62, 0x69, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x62, 0x69, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x5f, 0x73, 0x65, 0x63, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x63,
	0x61, 0x63, 0x68, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x63, 0x73, 0x12, 0x21, 0x0a, 0x0c,
	0x66, 0x6c, 0x5f, 0x65, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x0b, 0x20, 0x03,
	0x28, 0x02, 0x52, 0x0b, 0x66, 0x6c, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x12,
	0x17, 0x0a, 0x07, 0x72, 0x74, 0x61, 0x5f, 0x76, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x72, 0x74, 0x61, 0x56, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x07, 0x63, 0x75, 0x73, 0x5f,
	0x76, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x07, 0x2e, 0x43, 0x75, 0x73, 0x56,
	0x69, 0x64, 0x52, 0x06, 0x63, 0x75, 0x73, 0x56, 0x69, 0x64, 0x2a, 0x3a, 0x0a, 0x0c, 0x50, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x50, 0x4c,
	0x41, 0x54, 0x46, 0x4f, 0x52, 0x4d, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00,
	0x12, 0x0b, 0x0a, 0x07, 0x41, 0x4e, 0x44, 0x52, 0x4f, 0x49, 0x44, 0x10, 0x01, 0x12, 0x07, 0x0a,
	0x03, 0x49, 0x4f, 0x53, 0x10, 0x02, 0x2a, 0x37, 0x0a, 0x0a, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x0e, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x55,
	0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x50, 0x48, 0x4f, 0x4e,
	0x45, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x54, 0x10, 0x02, 0x2a,
	0x5d, 0x0a, 0x0c, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4f, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x15, 0x0a, 0x11, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x4f, 0x53, 0x5f, 0x55, 0x4e, 0x4b,
	0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45,
	0x5f, 0x41, 0x4e, 0x44, 0x52, 0x4f, 0x49, 0x44, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x44, 0x45,
	0x56, 0x49, 0x43, 0x45, 0x5f, 0x49, 0x4f, 0x53, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x44, 0x45,
	0x56, 0x49, 0x43, 0x45, 0x5f, 0x57, 0x49, 0x4e, 0x44, 0x4f, 0x57, 0x53, 0x10, 0x03, 0x2a, 0x36,
	0x0a, 0x0a, 0x47, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x0e,
	0x47, 0x45, 0x4e, 0x44, 0x45, 0x52, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00,
	0x12, 0x08, 0x0a, 0x04, 0x4d, 0x41, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x45,
	0x4d, 0x41, 0x4c, 0x45, 0x10, 0x02, 0x2a, 0x8d, 0x01, 0x0a, 0x07, 0x44, 0x69, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x49, 0x4d, 0x45, 0x49, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08,
	0x49, 0x4d, 0x45, 0x49, 0x5f, 0x4d, 0x44, 0x35, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x41, 0x4e,
	0x44, 0x52, 0x4f, 0x49, 0x44, 0x5f, 0x49, 0x44, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x41, 0x4e,
	0x44, 0x52, 0x4f, 0x49, 0x44, 0x5f, 0x49, 0x44, 0x5f, 0x4d, 0x44, 0x35, 0x10, 0x03, 0x12, 0x08,
	0x0a, 0x04, 0x49, 0x44, 0x46, 0x41, 0x10, 0x04, 0x12, 0x0c, 0x0a, 0x08, 0x49, 0x44, 0x46, 0x41,
	0x5f, 0x4d, 0x44, 0x35, 0x10, 0x05, 0x12, 0x08, 0x0a, 0x04, 0x4f, 0x41, 0x49, 0x44, 0x10, 0x06,
	0x12, 0x0c, 0x0a, 0x08, 0x4f, 0x41, 0x49, 0x44, 0x5f, 0x4d, 0x44, 0x35, 0x10, 0x07, 0x12, 0x08,
	0x0a, 0x04, 0x47, 0x41, 0x49, 0x44, 0x10, 0x08, 0x12, 0x0c, 0x0a, 0x08, 0x47, 0x41, 0x49, 0x44,
	0x5f, 0x4d, 0x44, 0x35, 0x10, 0x09, 0x2a, 0xdd, 0x01, 0x0a, 0x0e, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x49, 0x53,
	0x41, 0x42, 0x4c, 0x45, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45,
	0x5f, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x45, 0x4e,
	0x41, 0x42, 0x4c, 0x45, 0x5f, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x32, 0x10, 0x02, 0x12, 0x11, 0x0a,
	0x0d, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x33, 0x10, 0x03,
	0x12, 0x11, 0x0a, 0x0d, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x54, 0x79, 0x70, 0x65, 0x5f,
	0x34, 0x10, 0x04, 0x12, 0x11, 0x0a, 0x0d, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x54, 0x79,
	0x70, 0x65, 0x5f, 0x35, 0x10, 0x05, 0x12, 0x11, 0x0a, 0x0d, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45,
	0x5f, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x36, 0x10, 0x06, 0x12, 0x11, 0x0a, 0x0d, 0x45, 0x4e, 0x41,
	0x42, 0x4c, 0x45, 0x5f, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x37, 0x10, 0x07, 0x12, 0x11, 0x0a, 0x0d,
	0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x38, 0x10, 0x08, 0x12,
	0x11, 0x0a, 0x0d, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x39,
	0x10, 0x09, 0x12, 0x12, 0x0a, 0x0e, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x54, 0x79, 0x70,
	0x65, 0x5f, 0x31, 0x30, 0x10, 0x0a, 0x2a, 0x40, 0x0a, 0x09, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x4d,
	0x6f, 0x64, 0x65, 0x12, 0x11, 0x0a, 0x0d, 0x49, 0x4d, 0x41, 0x47, 0x45, 0x5f, 0x44, 0x45, 0x46,
	0x41, 0x55, 0x4c, 0x54, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x49, 0x4d, 0x41, 0x47, 0x45, 0x5f,
	0x56, 0x49, 0x44, 0x45, 0x4f, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x49, 0x4d, 0x41, 0x47, 0x45,
	0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x02, 0x2a, 0xb4, 0x01, 0x0a, 0x06, 0x43, 0x75, 0x73,
	0x56, 0x69, 0x64, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x55, 0x53, 0x5f, 0x56, 0x49, 0x44, 0x5f, 0x55,
	0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x55, 0x53, 0x5f,
	0x56, 0x49, 0x44, 0x5f, 0x31, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x55, 0x53, 0x5f, 0x56,
	0x49, 0x44, 0x5f, 0x32, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x55, 0x53, 0x5f, 0x56, 0x49,
	0x44, 0x5f, 0x33, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x55, 0x53, 0x5f, 0x56, 0x49, 0x44,
	0x5f, 0x34, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x55, 0x53, 0x5f, 0x56, 0x49, 0x44, 0x5f,
	0x35, 0x10, 0x05, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x55, 0x53, 0x5f, 0x56, 0x49, 0x44, 0x5f, 0x36,
	0x10, 0x06, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x55, 0x53, 0x5f, 0x56, 0x49, 0x44, 0x5f, 0x37, 0x10,
	0x07, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x55, 0x53, 0x5f, 0x56, 0x49, 0x44, 0x5f, 0x38, 0x10, 0x08,
	0x12, 0x0d, 0x0a, 0x09, 0x43, 0x55, 0x53, 0x5f, 0x56, 0x49, 0x44, 0x5f, 0x39, 0x10, 0x09, 0x12,
	0x0e, 0x0a, 0x0a, 0x43, 0x55, 0x53, 0x5f, 0x56, 0x49, 0x44, 0x5f, 0x31, 0x30, 0x10, 0x0a, 0x42,
	0x30, 0x5a, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x68, 0x6f,
	0x70, 0x77, 0x65, 0x73, 0x6c, 0x65, 0x79, 0x2f, 0x72, 0x74, 0x61, 0x2d, 0x6d, 0x61, 0x70, 0x70,
	0x69, 0x6e, 0x67, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x3b, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_rta_api_proto_rawDescOnce sync.Once
	file_rta_api_proto_rawDescData = file_rta_api_proto_rawDesc
)

func file_rta_api_proto_rawDescGZIP() []byte {
	file_rta_api_proto_rawDescOnce.Do(func() {
		file_rta_api_proto_rawDescData = protoimpl.X.CompressGZIP(file_rta_api_proto_rawDescData)
	})
	return file_rta_api_proto_rawDescData
}

var file_rta_api_proto_enumTypes = make([]protoimpl.EnumInfo, 12)
var file_rta_api_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_rta_api_proto_goTypes = []interface{}{
	(PlatformType)(0),              // 0: PlatformType
	(DeviceType)(0),                // 1: DeviceType
	(DeviceOsType)(0),              // 2: DeviceOsType
	(GenderType)(0),                // 3: GenderType
	(DidType)(0),                   // 4: DidType
	(EnableStrategy)(0),            // 5: EnableStrategy
	(ImageMode)(0),                 // 6: ImageMode
	(CusVid)(0),                    // 7: CusVid
	(UserInfo_UserType)(0),         // 8: UserInfo.UserType
	(UserInfo_PidType)(0),          // 9: UserInfo.PidType
	(UserInfo_PricingType)(0),      // 10: UserInfo.PricingType
	(UserInfo_ActionType)(0),       // 11: UserInfo.ActionType
	(*Paid)(nil),                   // 12: Paid
	(*Device)(nil),                 // 13: Device
	(*Industry)(nil),               // 14: Industry
	(*Geo)(nil),                    // 15: Geo
	(*ModelMeta)(nil),              // 16: ModelMeta
	(*PrivateModel)(nil),           // 17: PrivateModel
	(*AdvPrivateModel)(nil),        // 18: AdvPrivateModel
	(*Req)(nil),                    // 19: Req
	(*UserInfo)(nil),               // 20: UserInfo
	(*Rsp)(nil),                    // 21: Rsp
	nil,                            // 22: AdvPrivateModel.AdvPrivateModelEntry
	(*UserInfo_UserQuality)(nil),   // 23: UserInfo.UserQuality
	(*UserInfo_ActionQuality)(nil), // 24: UserInfo.ActionQuality
	(*UserInfo_PidScore)(nil),      // 25: UserInfo.PidScore
	(*UserInfo_PidList)(nil),       // 26: UserInfo.PidList
	(*wrapperspb.Int32Value)(nil),  // 27: google.protobuf.Int32Value
}
var file_rta_api_proto_depIdxs = []int32{
	2,  // 0: Device.device_os_type:type_name -> DeviceOsType
	2,  // 1: Device.interface_type:type_name -> DeviceOsType
	12, // 2: Device.paids:type_name -> Paid
	16, // 3: PrivateModel.model_meta:type_name -> ModelMeta
	22, // 4: AdvPrivateModel.adv_private_model:type_name -> AdvPrivateModel.AdvPrivateModelEntry
	0,  // 5: Req.platform:type_name -> PlatformType
	3,  // 6: Req.gender:type_name -> GenderType
	4,  // 7: Req.did_type:type_name -> DidType
	1,  // 8: Req.device_type:type_name -> DeviceType
	5,  // 9: Req.enable_strategy:type_name -> EnableStrategy
	13, // 10: Req.device:type_name -> Device
	14, // 11: Req.industry:type_name -> Industry
	15, // 12: Req.geo:type_name -> Geo
	16, // 13: Req.private_model:type_name -> ModelMeta
	6,  // 14: Req.image_mode:type_name -> ImageMode
	23, // 15: UserInfo.user_scores:type_name -> UserInfo.UserQuality
	26, // 16: UserInfo.pid_lists:type_name -> UserInfo.PidList
	24, // 17: UserInfo.action_scores:type_name -> UserInfo.ActionQuality
	7,  // 18: UserInfo.cus_vid:type_name -> CusVid
	20, // 19: Rsp.user_infos:type_name -> UserInfo
	27, // 20: Rsp.bid_type:type_name -> google.protobuf.Int32Value
	7,  // 21: Rsp.cus_vid:type_name -> CusVid
	17, // 22: AdvPrivateModel.AdvPrivateModelEntry.value:type_name -> PrivateModel
	8,  // 23: UserInfo.UserQuality.user_type:type_name -> UserInfo.UserType
	10, // 24: UserInfo.UserQuality.pricing_type:type_name -> UserInfo.PricingType
	11, // 25: UserInfo.ActionQuality.action_type:type_name -> UserInfo.ActionType
	8,  // 26: UserInfo.PidScore.user_type:type_name -> UserInfo.UserType
	9,  // 27: UserInfo.PidList.pid_type:type_name -> UserInfo.PidType
	25, // 28: UserInfo.PidList.pid_scores:type_name -> UserInfo.PidScore
	29, // [29:29] is the sub-list for method output_type
	29, // [29:29] is the sub-list for method input_type
	29, // [29:29] is the sub-list for extension type_name
	29, // [29:29] is the sub-list for extension extendee
	0,  // [0:29] is the sub-list for field type_name
}

func init() { file_rta_api_proto_init() }
func file_rta_api_proto_init() {
	if File_rta_api_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_rta_api_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Paid); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rta_api_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rta_api_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Industry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rta_api_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Geo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rta_api_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModelMeta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rta_api_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrivateModel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rta_api_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdvPrivateModel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rta_api_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Req); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rta_api_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rta_api_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Rsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rta_api_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserInfo_UserQuality); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rta_api_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserInfo_ActionQuality); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rta_api_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserInfo_PidScore); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rta_api_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserInfo_PidList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_rta_api_proto_rawDesc,
			NumEnums:      12,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_rta_api_proto_goTypes,
		DependencyIndexes: file_rta_api_proto_depIdxs,
		EnumInfos:         file_rta_api_proto_enumTypes,
		MessageInfos:      file_rta_api_proto_msgTypes,
	}.Build()
	File_rta_api_proto = out.File
	file_rta_api_proto_rawDesc = nil
	file_rta_api_proto_goTypes = nil
	file_rta_api_proto_depIdxs = nil
}
